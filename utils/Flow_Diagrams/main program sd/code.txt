Initialize  a, b, c;
branch(RSSI_a)
[RSSI a] 
{ /*RSSI value between the RSSI values of the robot and the phone and offset_a is the offset value for maximum received signal.*/
  RSSI a;
  a = receive_a();
  if(a > followDistance)[Yes]{
    motorLeft = motorForward + rotation(zeroth index);
    motorRight = motorForward + rotation(first index);
    writeMotor(motorLeft, motorRight)
  } else [No]
  {
    motorLeft = rotation(zeroth index);
        motorRight = rotation(first index);
        writeMotor(motorLeft, motorRight);
  }
}

branch(RSSI_b)
[RSSI b] 
{ /*RSSI value between the RSSI values of the robot and the static beacon and offset_b is the offset value for maximum received signal.*/
  RSSI b;
  b = receive_b();
}
branch(RSSI_c)
[RSSI c] 
{ /*RSSI between the RSSI values of the static beacon and the phone and offset_c is the offset value for maximum received signal.*/
  RSSI c;
  c = receive_c();
}
branch(angle_old)
[angleOld ao] 
{
  /*This variable stores the current value of the angle.*/
  float angle_old;
}  
branch(angle_new)
[angleNew an] 
{
  /*This variable stores the new value of the angle.*/
  float angle_new;
  angle_new = calculate_angle(a,b,c);
  angle_diff = angle_new - angle_old;
  
}
branch(followDistance)
[follow_distance fd] 
{
  /*The distance to be followed by the cart.*/
  int followDistance;
}
branch(angleMove)
[angle_move am] 
{
  /*The angle to accummulate before moving/turning.*/
  int angleMove;
}
branch(followDistance)
[follow_distance fd] 
{
  /*The distance to be followed by the cart.*/
  int followDistance;
}
branch(rotation)
[rotation r_ptr] 
{
  /*The rotation pointer.*/
  int * rotation;
}
branch(rotate)
[rotate r] 
{
  /*This variable gives the indication to rotate the cart.*/
  int rotate;
  while(rotate = 1);
  rotation = angleCorrection(angle_diff);
  angle_old = caiculateAngle(angle_old);
  if (angle_diff = 0)[True]
  rotate = 0;
  if (abs(angle_diff) > angleMove) [True]{
    rotate = 1;
  }
  else if(rotate = 0 && abs(angle_diff) < angleMove){
    angle_old = angle_old;
  }
}
/*These comma nds are used for motor manipulation and control.*/
motor commands;
branch(motorLeft)
[motor_left ml] 
{
  /*To rotate the motor towards left direction.*/
  int motorLeft;
}
branch(motorRight)
[motor_right mr] 
{
  /*To rotate the motor towards right direction.*/
  int motorRight;
}
branch(motorForward)
[motor_forward mfwd] 
{
  /*To rotate the motor forward in clock-wise direction.*/
  int motorForward;
}